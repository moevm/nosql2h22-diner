/**
 * Generated by @openapi-codegen
 *
 * @version v1
 */
import * as reactQuery from "@tanstack/react-query";
import { useDinerContext, DinerContext } from "./dinerContext";
import type * as Fetcher from "./dinerFetcher";
import { dinerFetch } from "./dinerFetcher";
import type * as Schemas from "./dinerSchemas";

export type LogInError = Fetcher.ErrorWrapper<undefined>;

export type LogInVariables = {
  body?: Schemas.AuthDto;
} & DinerContext["fetcherOptions"];

export const fetchLogIn = (variables: LogInVariables, signal?: AbortSignal) =>
  dinerFetch<undefined, LogInError, Schemas.AuthDto, {}, {}, {}>({
    url: "/api/Auth/login",
    method: "post",
    ...variables,
    signal,
  });

export const useLogIn = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, LogInError, LogInVariables>,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDinerContext();
  return reactQuery.useMutation<undefined, LogInError, LogInVariables>(
    (variables: LogInVariables) =>
      fetchLogIn({ ...fetcherOptions, ...variables }),
    options
  );
};

export type WhoAmIError = Fetcher.ErrorWrapper<undefined>;

export type WhoAmIVariables = DinerContext["fetcherOptions"];

export const fetchWhoAmI = (variables: WhoAmIVariables, signal?: AbortSignal) =>
  dinerFetch<Schemas.User, WhoAmIError, undefined, {}, {}, {}>({
    url: "/api/Auth/who-am-i",
    method: "get",
    ...variables,
    signal,
  });

export const useWhoAmI = <TData = Schemas.User>(
  variables: WhoAmIVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.User, WhoAmIError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useDinerContext(options);
  return reactQuery.useQuery<Schemas.User, WhoAmIError, TData>(
    queryKeyFn({
      path: "/api/Auth/who-am-i",
      operationId: "whoAmI",
      variables,
    }),
    ({ signal }) => fetchWhoAmI({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CreatePaymentsError = Fetcher.ErrorWrapper<undefined>;

export type CreatePaymentsVariables = {
  body?: Schemas.PaymentDto;
} & DinerContext["fetcherOptions"];

export const fetchCreatePayments = (
  variables: CreatePaymentsVariables,
  signal?: AbortSignal
) =>
  dinerFetch<
    Schemas.Payment,
    CreatePaymentsError,
    Schemas.PaymentDto,
    {},
    {},
    {}
  >({
    url: "/api/Payment/create-payments",
    method: "post",
    ...variables,
    signal,
  });

export const useCreatePayments = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Payment,
      CreatePaymentsError,
      CreatePaymentsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDinerContext();
  return reactQuery.useMutation<
    Schemas.Payment,
    CreatePaymentsError,
    CreatePaymentsVariables
  >(
    (variables: CreatePaymentsVariables) =>
      fetchCreatePayments({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetPaymentsError = Fetcher.ErrorWrapper<undefined>;

export type GetPaymentsResponse = Schemas.Payment[];

export type GetPaymentsVariables = DinerContext["fetcherOptions"];

export const fetchGetPayments = (
  variables: GetPaymentsVariables,
  signal?: AbortSignal
) =>
  dinerFetch<GetPaymentsResponse, GetPaymentsError, undefined, {}, {}, {}>({
    url: "/api/Payment/get-payments",
    method: "get",
    ...variables,
    signal,
  });

export const useGetPayments = <TData = GetPaymentsResponse>(
  variables: GetPaymentsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetPaymentsResponse, GetPaymentsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useDinerContext(options);
  return reactQuery.useQuery<GetPaymentsResponse, GetPaymentsError, TData>(
    queryKeyFn({
      path: "/api/Payment/get-payments",
      operationId: "getPayments",
      variables,
    }),
    ({ signal }) =>
      fetchGetPayments({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GetPaymentQueryParams = {
  id?: string;
};

export type GetPaymentError = Fetcher.ErrorWrapper<undefined>;

export type GetPaymentVariables = {
  queryParams?: GetPaymentQueryParams;
} & DinerContext["fetcherOptions"];

export const fetchGetPayment = (
  variables: GetPaymentVariables,
  signal?: AbortSignal
) =>
  dinerFetch<
    Schemas.Payment,
    GetPaymentError,
    undefined,
    {},
    GetPaymentQueryParams,
    {}
  >({ url: "/api/Payment/get-payment", method: "get", ...variables, signal });

export const useGetPayment = <TData = Schemas.Payment>(
  variables: GetPaymentVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Payment, GetPaymentError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useDinerContext(options);
  return reactQuery.useQuery<Schemas.Payment, GetPaymentError, TData>(
    queryKeyFn({
      path: "/api/Payment/get-payment",
      operationId: "getPayment",
      variables,
    }),
    ({ signal }) =>
      fetchGetPayment({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GetShiftsError = Fetcher.ErrorWrapper<undefined>;

export type GetShiftsResponse = Schemas.Shift[];

export type GetShiftsVariables = {
  body?: Schemas.GetShiftDto;
} & DinerContext["fetcherOptions"];

export const fetchGetShifts = (
  variables: GetShiftsVariables,
  signal?: AbortSignal
) =>
  dinerFetch<
    GetShiftsResponse,
    GetShiftsError,
    Schemas.GetShiftDto,
    {},
    {},
    {}
  >({ url: "/api/Shift/get-shifts", method: "get", ...variables, signal });

export const useGetShifts = <TData = GetShiftsResponse>(
  variables: GetShiftsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetShiftsResponse, GetShiftsError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useDinerContext(options);
  return reactQuery.useQuery<GetShiftsResponse, GetShiftsError, TData>(
    queryKeyFn({
      path: "/api/Shift/get-shifts",
      operationId: "getShifts",
      variables,
    }),
    ({ signal }) => fetchGetShifts({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GetShiftQueryParams = {
  id?: string;
};

export type GetShiftError = Fetcher.ErrorWrapper<undefined>;

export type GetShiftVariables = {
  queryParams?: GetShiftQueryParams;
} & DinerContext["fetcherOptions"];

export const fetchGetShift = (
  variables: GetShiftVariables,
  signal?: AbortSignal
) =>
  dinerFetch<
    Schemas.Shift,
    GetShiftError,
    undefined,
    {},
    GetShiftQueryParams,
    {}
  >({ url: "/api/Shift/get-shift", method: "get", ...variables, signal });

export const useGetShift = <TData = Schemas.Shift>(
  variables: GetShiftVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Shift, GetShiftError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useDinerContext(options);
  return reactQuery.useQuery<Schemas.Shift, GetShiftError, TData>(
    queryKeyFn({
      path: "/api/Shift/get-shift",
      operationId: "getShift",
      variables,
    }),
    ({ signal }) => fetchGetShift({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type CreateUserError = Fetcher.ErrorWrapper<undefined>;

export type CreateUserVariables = {
  body?: Schemas.UserDto;
} & DinerContext["fetcherOptions"];

export const fetchCreateUser = (
  variables: CreateUserVariables,
  signal?: AbortSignal
) =>
  dinerFetch<Schemas.User, CreateUserError, Schemas.UserDto, {}, {}, {}>({
    url: "/api/User/create-user",
    method: "post",
    ...variables,
    signal,
  });

export const useCreateUser = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.User,
      CreateUserError,
      CreateUserVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useDinerContext();
  return reactQuery.useMutation<
    Schemas.User,
    CreateUserError,
    CreateUserVariables
  >(
    (variables: CreateUserVariables) =>
      fetchCreateUser({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetUsersError = Fetcher.ErrorWrapper<undefined>;

export type GetUsersResponse = Schemas.User[];

export type GetUsersVariables = DinerContext["fetcherOptions"];

export const fetchGetUsers = (
  variables: GetUsersVariables,
  signal?: AbortSignal
) =>
  dinerFetch<GetUsersResponse, GetUsersError, undefined, {}, {}, {}>({
    url: "/api/User/get-users",
    method: "get",
    ...variables,
    signal,
  });

export const useGetUsers = <TData = GetUsersResponse>(
  variables: GetUsersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetUsersResponse, GetUsersError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useDinerContext(options);
  return reactQuery.useQuery<GetUsersResponse, GetUsersError, TData>(
    queryKeyFn({
      path: "/api/User/get-users",
      operationId: "getUsers",
      variables,
    }),
    ({ signal }) => fetchGetUsers({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type GetUserQueryParams = {
  id?: string;
};

export type GetUserError = Fetcher.ErrorWrapper<undefined>;

export type GetUserVariables = {
  queryParams?: GetUserQueryParams;
} & DinerContext["fetcherOptions"];

export const fetchGetUser = (
  variables: GetUserVariables,
  signal?: AbortSignal
) =>
  dinerFetch<Schemas.User, GetUserError, undefined, {}, GetUserQueryParams, {}>(
    { url: "/api/User/get-user", method: "get", ...variables, signal }
  );

export const useGetUser = <TData = Schemas.User>(
  variables: GetUserVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.User, GetUserError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useDinerContext(options);
  return reactQuery.useQuery<Schemas.User, GetUserError, TData>(
    queryKeyFn({
      path: "/api/User/get-user",
      operationId: "getUser",
      variables,
    }),
    ({ signal }) => fetchGetUser({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type QueryOperation =
  | {
      path: "/api/Auth/who-am-i";
      operationId: "whoAmI";
      variables: WhoAmIVariables;
    }
  | {
      path: "/api/Payment/get-payments";
      operationId: "getPayments";
      variables: GetPaymentsVariables;
    }
  | {
      path: "/api/Payment/get-payment";
      operationId: "getPayment";
      variables: GetPaymentVariables;
    }
  | {
      path: "/api/Shift/get-shifts";
      operationId: "getShifts";
      variables: GetShiftsVariables;
    }
  | {
      path: "/api/Shift/get-shift";
      operationId: "getShift";
      variables: GetShiftVariables;
    }
  | {
      path: "/api/User/get-users";
      operationId: "getUsers";
      variables: GetUsersVariables;
    }
  | {
      path: "/api/User/get-user";
      operationId: "getUser";
      variables: GetUserVariables;
    };
